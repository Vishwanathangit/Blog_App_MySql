# Code Repository Snapshot: backend

--------------------------------------------
Generated with reposnap v1.3.0
Project: https://github.com/akhshyganesh/reposnap#readme
Author: akhshyganesh
Generated on: 7/17/2025 at 10:43:52 PM
--------------------------------------------


📄 app.js
  ---
  import express from "express";
  import cors from "cors";
  import morgan from "morgan";
  
  import authRoutes from "./routes/authRoutes.js";
  import postRoutes from "./routes/postRoutes.js";
  import errorHandler from "./middlewares/errorHandler.js";
  
  const app = express();
  
  app.use(cors({
    origin: process.env.URL, 
    credentials: true
  }));
  app.use(morgan("dev"));
  app.use(express.json());
  
  app.use("/api/auth", authRoutes);
  app.use("/api/posts", postRoutes);
  
  app.use((req, res, next) => {
    res.status(404).json({ message: "Not Found" });
  });
  
  app.use(errorHandler);
  
  export default app;
  ---

📁 config/
  📄 db.js
    ---
    import { Sequelize } from "sequelize";
    import dotenv from "dotenv";
    dotenv.config();
    
    const sequelize = new Sequelize(
      process.env.DB_NAME,
      process.env.DB_USER,
      process.env.DB_PASSWORD,
      {
        host: process.env.DB_HOST,
        dialect: process.env.DB_DIALECT,
        logging: false,
      }
    );
    
    export default sequelize;
    ---

📁 controllers/
  📄 authController.js
    ---
    import jwt from 'jsonwebtoken';
    import bcrypt from 'bcryptjs';
    import db from '../models/index.js';
    
    const { User } = db;
    const JWT_SECRET = process.env.JWT_SECRET;
    const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN;
    
    export const register = async (req, res, next) => {
      try {
        const { username, email, password } = req.body;
    
        console.log("REGISTER PAYLOAD:", req.body); // 🔍 DEBUG
    
        if (!username || !email || !password) {
          return res.status(400).json({ message: 'All fields are required' });
        }
    
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) {
          return res.status(400).json({ message: 'Email already in use' });
        }
    
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = await User.create({ username, email, password: hashedPassword });
    
        console.log("USER CREATED:", user); // 🔍 DEBUG
    
        res.status(201).json({
          id: user.id,
          username: user.username,
          email: user.email,
          createdAt: user.createdAt
        });
      } catch (error) {
        console.error("REGISTER ERROR:", error); // 🔍 DEBUG
        next(error);
      }
    };
    
    
    export const login = async (req, res, next) => {
      try {
        const { email, password } = req.body;
    
        if (!email || !password) {
          return res.status(400).json({ message: 'Email and password are required' });
        }
    
        const user = await User.findOne({ where: { email } });
        console.log(user)
    
        if (!user || !(await bcrypt.compare(password, user.password))) {
          return res.status(401).json({ message: 'Invalid credentials' });
        }
    
        const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });
    
        res.status(200).json({
          token,
          user: {
            id: user.id,
            username: user.username,
            email: user.email
          }
        });
      } catch (error) {
        next(error);
      }
    };
    
    ---

  📄 postController.js
    ---
    import sequelize from '../config/db.js';
    import db from '../models/index.js';
    import postSchema from '../schemas/postSchema.js';
    
    const { Post, User, Tag, Category } = db;
    
    export const getAllPosts = async (req, res, next) => {
      try {
        const page = parseInt(req.query.page) || 1;
        const limit = 10;
        const offset = (page - 1) * limit;
        const tag = req.query.tag;
        const category = req.query.category;
    
        let whereClause = '';
        const replacements = [];
    
        if (category) {
          whereClause += ` AND c.name = ?`;
          replacements.push(category);
        }
    
        if (tag) {
          whereClause += ` AND t.name = ?`;
          replacements.push(tag);
        }
    
        const baseQuery = `FROM posts p LEFT JOIN users u ON p.UserId = u.id LEFT JOIN categories c ON p.CategoryId = c.id LEFT JOIN post_tags pt ON p.id = pt.PostId LEFT JOIN tags t ON pt.TagId = t.id WHERE 1=1${whereClause}`;
    
        const countQuery = `SELECT COUNT(DISTINCT p.id) as total ${baseQuery}`;
        const [countResult] = await sequelize.query(countQuery, {
          replacements,
          type: sequelize.QueryTypes.SELECT,
        });
        const totalPosts = countResult.total;
    
        const dataQuery = `
          SELECT
          p.id,
          p.title,
          p.content,
          p.createdAt,
          u.username,
          c.id AS categoryId,
          c.name AS category,
          GROUP_CONCAT(DISTINCT t.name) AS tags
          ${baseQuery}
          GROUP BY p.id
          ORDER BY p.createdAt DESC
          LIMIT ? OFFSET ?
        `;
        replacements.push(limit, offset);
    
        const posts = await sequelize.query(dataQuery, {
          replacements,
          type: sequelize.QueryTypes.SELECT,
        });
    
        res.status(200).json({
          posts,
          pagination: {
            currentPage: page,
            totalPages: Math.ceil(totalPosts / limit),
            totalPosts,
          },
        });
      } catch (err) {
        next(err);
      }
    };
    
    export const getPostById = async (req, res, next) => {
      try {
        const post = await Post.findByPk(req.params.id, {
          attributes: ['id', 'title', 'content', 'createdAt', 'updatedAt', 'CategoryId'],
          include: [
            { model: User, attributes: ['username'] },
            { model: Category, attributes: ['name'] },
            { model: Tag, attributes: ['name'], through: { attributes: [] } },
          ],
        });
        if (!post) {
          return res.status(404).json({ message: 'Post not found' });
        }
    
        res.status(200).json(post);
      } catch (error) {
        next(error);
      }
    };
    
    export const getCategories = async (req, res, next) => {
      try {
        const categories = await Category.findAll({
          attributes: ['id', 'name'],
        });
        res.status(200).json(categories);
      } catch (err) {
        next(err);
      }
    };
    
    export const createPost = async (req, res, next) => {
      try {
        // Check if user is authenticated
        if (!req.user || !req.user.id) {
          console.error("Missing authenticated user.");
          return res.status(401).json({ message: "Unauthorized: No user info in token." });
        }
    
        console.log("Request body:", req.body);
        console.log("User from token:", req.user);
    
        // Validate request data
        let validatedData;
        try {
          validatedData = postSchema.parse(req.body);
        } catch (validationError) {
          console.error("Validation error:", validationError);
          return res.status(400).json({
            message: "Validation failed",
            errors: validationError.errors || validationError.message,
          });
        }
    
        const { title, content, categoryId, tags = [] } = validatedData;
    
        // Validate required fields
        if (!title || !content) {
          return res.status(400).json({ message: "Title and content are required" });
        }
    
        // Verify category exists
        const category = await Category.findByPk(categoryId);
        if (!category) {
          return res.status(400).json({ message: "Invalid category ID" });
        }
    
        // Verify user exists
        const user = await User.findByPk(req.user.id);
        if (!user) {
          return res.status(400).json({ message: "User not found" });
        }
    
        console.log("Creating post with validated data:", {
          title,
          content,
          userId: req.user.id,
          categoryId,
        });
    
        // Create the post
        const post = await Post.create({
          title,
          content,
          UserId: req.user.id,
          CategoryId: categoryId,
        });
    
        console.log("Post created successfully:", post.id);
    
        // Handle tags if provided
        if (tags && tags.length > 0) {
          try {
            const tagInstances = await Promise.all(
              tags.map(async (name) => {
                const trimmedName = name.trim();
                if (!trimmedName) return null;
    
                const [tag] = await Tag.findOrCreate({ where: { name: trimmedName } });
                return tag;
              })
            );
    
            // Filter out null tags
            const validTagInstances = tagInstances.filter(tag => tag !== null);
    
            if (validTagInstances.length > 0) {
              await post.setTags(validTagInstances);
            }
          } catch (tagError) {
            console.error("Tag processing error:", tagError);
            // Continue without tags if tag processing fails
          }
        }
    
        // Fetch the complete post with associations
        const fullPost = await Post.findByPk(post.id, {
          include: [
            { model: User, attributes: ['username'] },
            { model: Category, attributes: ['name'] },
            { model: Tag, attributes: ['name'], through: { attributes: [] } },
          ],
        });
    
        console.log("Full post created:", fullPost);
    
        res.status(201).json(fullPost);
      } catch (err) {
        console.error("CreatePost error:", err);
        console.error("Error stack:", err.stack);
    
        // Handle specific Sequelize errors
        if (err.name === 'SequelizeValidationError') {
          return res.status(400).json({
            message: "Validation error",
            errors: err.errors.map(e => e.message),
          });
        }
    
        if (err.name === 'SequelizeUniqueConstraintError') {
          return res.status(400).json({
            message: "A post with this title already exists",
          });
        }
    
        if (err.name === 'SequelizeForeignKeyConstraintError') {
          return res.status(400).json({
            message: "Invalid foreign key reference",
          });
        }
    
        res.status(500).json({
          message: "Internal Server Error",
          error: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong',
        });
      }
    };
    
    export const updatePost = async (req, res, next) => {
      try {
        const validatedData = postSchema.parse(req.body);
        const { title, content, categoryId, tags = [] } = validatedData;
    
        const post = await Post.findByPk(req.params.id);
        if (!post) return res.status(404).json({ message: 'Post not found' });
    
        // Check if user owns the post
        if (req.user && post.UserId !== req.user.id) {
          return res.status(403).json({ message: 'Unauthorized to update this post' });
        }
    
        // Verify category exists
        const category = await Category.findByPk(categoryId);
        if (!category) {
          return res.status(400).json({ message: "Invalid category ID" });
        }
    
        await post.update({ title, content, CategoryId: categoryId });
    
        if (tags.length > 0) {
          const tagInstances = await Promise.all(
            tags.map(async (name) => {
              const trimmedName = name.trim();
              if (!trimmedName) return null;
    
              const [tag] = await Tag.findOrCreate({ where: { name: trimmedName } });
              return tag;
            })
          );
    
          const validTagInstances = tagInstances.filter(tag => tag !== null);
          await post.setTags(validTagInstances);
        } else {
          // Clear all tags if none provided
          await post.setTags([]);
        }
    
        const updatedPost = await Post.findByPk(req.params.id, {
          include: [
            { model: User, attributes: ['username'] },
            { model: Category, attributes: ['name'] },
            { model: Tag, attributes: ['name'], through: { attributes: [] } },
          ],
        });
    
        res.status(200).json(updatedPost);
      } catch (err) {
        next(err);
      }
    };
    
    export const deletePost = async (req, res, next) => {
      try {
        const post = await Post.findByPk(req.params.id);
        if (!post) return res.status(404).json({ message: 'Post not found' });
    
        // Check if user owns the post
        if (req.user && post.UserId !== req.user.id) {
          return res.status(403).json({ message: 'Unauthorized to delete this post' });
        }
    
        await post.destroy();
        res.status(204).end();
      } catch (err) {
        next(err);
      }
    };
    ---

📁 middlewares/
  📄 auth.js
    ---
    import jwt from 'jsonwebtoken';
    
    const JWT_SECRET = process.env.JWT_SECRET;
    
    const authenticate = (req, res, next) => {
      try {
        const authHeader = req.headers.authorization;
        
        if (!authHeader) {
          return res.status(401).json({ message: 'Authorization header required' });
        }
        
        const token = authHeader.startsWith('Bearer ') ? authHeader.split(' ')[1] : null;
    
        if (!token) {
          return res.status(401).json({ message: 'Authentication token required' });
        }
    
        if (!JWT_SECRET) {
          console.error('JWT_SECRET is not defined in environment variables');
          return res.status(500).json({ message: 'Server configuration error' });
        }
    
        jwt.verify(token, JWT_SECRET, (err, decoded) => {
          if (err) {
            console.error('JWT verification failed:', err);
            
            if (err.name === 'TokenExpiredError') {
              return res.status(401).json({ message: 'Token has expired' });
            }
            
            if (err.name === 'JsonWebTokenError') {
              return res.status(403).json({ message: 'Invalid token' });
            }
            
            return res.status(403).json({ message: 'Token verification failed' });
          }
    
          // Set user info from decoded token
          req.user = {
            id: decoded.userId || decoded.id,
            username: decoded.username,
            email: decoded.email
          };
    
          console.log('Authenticated user:', req.user);
          next();
        });
      } catch (error) {
        console.error('Authentication middleware error:', error);
        return res.status(500).json({ message: 'Authentication error' });
      }
    };
    
    export default authenticate;
    ---

  📄 errorHandler.js
    ---
    const errorHandler = (err, req, res, next) => {
      console.error('Error caught by middleware:', err);
      console.error('Error stack:', err.stack);
    
      // Default error response
      let statusCode = 500;
      let message = 'Internal Server Error';
      let errors = null;
    
      // Handle different types of errors
      if (err.name === 'ValidationError') {
        statusCode = 400;
        message = 'Validation Error';
        errors = err.errors;
      } else if (err.name === 'SequelizeValidationError') {
        statusCode = 400;
        message = 'Database Validation Error';
        errors = err.errors.map(e => e.message);
      } else if (err.name === 'SequelizeUniqueConstraintError') {
        statusCode = 400;
        message = 'Duplicate entry error';
        errors = err.errors.map(e => `${e.path}: ${e.message}`);
      } else if (err.name === 'SequelizeForeignKeyConstraintError') {
        statusCode = 400;
        message = 'Foreign key constraint error';
      } else if (err.name === 'SequelizeDatabaseError') {
        statusCode = 500;
        message = 'Database error';
      } else if (err.name === 'JsonWebTokenError') {
        statusCode = 401;
        message = 'Invalid token';
      } else if (err.name === 'TokenExpiredError') {
        statusCode = 401;
        message = 'Token expired';
      } else if (err.statusCode) {
        statusCode = err.statusCode;
        message = err.message;
      } else if (err.status) {
        statusCode = err.status;
        message = err.message;
      } else if (err.message) {
        message = err.message;
      }
    
      // Don't expose sensitive error details in production
      const response = {
        success: false,
        message,
        ...(errors && { errors }),
        ...(process.env.NODE_ENV === 'development' && { 
          stack: err.stack,
          details: err 
        })
      };
    
      res.status(statusCode).json(response);
    };
    
    export default errorHandler;
    ---

📁 models/
  📄 Category.js
    ---
    import { DataTypes } from 'sequelize';
    import sequelize from '../config/db.js';
    
    const Category = sequelize.define('Category', {
      name: { type: DataTypes.STRING, unique: true },
      description: DataTypes.TEXT,
    }, {
      timestamps: true,
      tableName: 'categories',
    });
    
    export default Category;
    
    ---

  📄 Post.js
    ---
    import { DataTypes } from 'sequelize';
    import sequelize from '../config/db.js';
    
    const Post = sequelize.define('Post', {
      title: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true
      },
      content: {
        type: DataTypes.TEXT,
        allowNull: false
      },
      UserId: {
        type: DataTypes.INTEGER,
        allowNull: false  // ⬅️ This makes sure it must be provided
      },
      CategoryId: {
        type: DataTypes.INTEGER,
        allowNull: false
      }
    }, {
      timestamps: true,
      tableName: 'posts',
    });
    
    export default Post;
    
    ---

  📄 Tag.js
    ---
    import { DataTypes } from 'sequelize';
    import sequelize from '../config/db.js';
    
    const Tag = sequelize.define('Tag', {
      name: { type: DataTypes.STRING, unique: true }
    }, {
      timestamps: false,
      tableName: 'tags',
    });
    
    export default Tag;
    ---

  📄 User.js
    ---
    import { DataTypes } from 'sequelize';
    import sequelize from '../config/db.js';
    
    const User = sequelize.define('User', {
      username: DataTypes.STRING,
      email: { type: DataTypes.STRING, unique: true },
      password: DataTypes.STRING
    }, {
      timestamps: true,
      tableName: 'users',
    });
    
    export default User;
    
    ---

  📄 index.js
    ---
    import sequelize from '../config/db.js';
    import User from './User.js';
    import Post from './Post.js';
    import Category from './Category.js';
    import Tag from './Tag.js';
    
    
    User.hasMany(Post);
    Post.belongsTo(User);
    
    Category.hasMany(Post);
    Post.belongsTo(Category);
    
    Post.belongsToMany(Tag, { through: 'post_tags' });
    Tag.belongsToMany(Post, { through: 'post_tags' });
    
    const db = { sequelize, User, Post, Category, Tag };
    
    export default db;
    
    ---

📁 routes/
  📄 authRoutes.js
    ---
    import express from 'express';
    import { register, login } from '../controllers/authController.js';
    
    const router = express.Router();
    
    router.post('/register', register);
    router.post('/login', login);
    
    export default router;
    ---

  📄 postRoutes.js
    ---
    import express from 'express';
    import authenticate from '../middlewares/auth.js';
    import {
      getAllPosts,
      getPostById,
      createPost,
      updatePost,
      deletePost,
      getCategories,
    } from '../controllers/postController.js';
    
    const router = express.Router();
    
    router.get('/', getAllPosts);
    router.get('/categories', getCategories);
    router.get('/:id', getPostById);
    router.post('/', authenticate, createPost);
    router.put('/:id', authenticate, updatePost);
    router.delete('/:id', authenticate, deletePost);
    
    export default router;
    ---

📁 schemas/
  📄 postSchema.js
    ---
    import { z } from 'zod';
    
    const postSchema = z.object({
      title: z.string()
        .min(1, "Title is required")
        .max(255, "Title must be less than 255 characters")
        .trim(),
      
      content: z.string()
        .min(1, "Content is required")
        .max(10000, "Content must be less than 10,000 characters")
        .trim(),
      
      categoryId: z.number()
        .int("Category ID must be an integer")
        .positive("Category ID must be positive"),
      
      tags: z.array(z.string().trim())
        .optional()
        .default([])
        .transform(tags => tags.filter(tag => tag.length > 0))
    });
    
    export default postSchema;
    ---

📁 scripts/
  📄 seedCategories.js.js
    ---
    import db from '../models/index.js';
    
    const seedCategories = async () => {
        try {
            await db.sequelize.sync();
            const existing = await db.Category.count();
            if (existing > 0) {
                console.log('Categories already exist. Skipping seed.');
                return;
            }
    
            const defaultCategories = [
                { name: 'Technology', description: 'Posts about technology and programming' },
                { name: 'Travel', description: 'Travel experiences and tips' },
                { name: 'Food', description: 'Recipes and restaurant reviews' },
                { name: 'Lifestyle', description: 'Daily life and personal thoughts' }
            ];
    
            await db.Category.bulkCreate(defaultCategories);
            console.log('Default categories seeded successfully.');
        } 
        catch (err) {
            console.error('Failed to seed categories:', err.message);
        }
    };
    
    seedCategories();
    ---

📄 server.js
  ---
  import dotenv from 'dotenv';
  dotenv.config();
  
  import app from './app.js';
  import db from './models/index.js';
  
  const PORT = process.env.PORT;
  
  db.sequelize.authenticate()
    .then(() => {
      console.log('DB connected');
      return db.sequelize.sync(); 
    })
    .then(() => {
      app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
    })
    .catch((err) => {
      console.error('DB connection failed:', err.message);
    });
  
  ---


# Snapshot Summary
Total files processed: 16
